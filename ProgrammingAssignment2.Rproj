## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
  
  ##To initialize the inverse property  
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  
  ##To get the matrix
  get <- function() x
  
  ##The way to set the inverse of the matrix
  setInverse <- function(inverse) inv <<- inverse
  
  ##The way to get the inverse of the matrix
  getInverse <- function() inv
  
  ##Return a list of the methods
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

##Computing the inverse of the unique matrix back by "makeCacheMatrix"
cacheSolve <- function(x, ...) {
  
  ## Return a matrix that is the inverse of 'x'
  inv <- x$getInverse()
  if (!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  mat <- x$get()
  inv <- solve(mat, ...)
  x$setInverse(inv)
  inv
}
